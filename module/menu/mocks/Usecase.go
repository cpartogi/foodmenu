// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/cpartogi/foodmenu/schema/request"
	response "github.com/cpartogi/foodmenu/schema/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

func (_m *Usecase) MenuType(ctx context.Context) (mt []response.MenuType, err error) {
	ret := _m.Called(ctx)

	var r0 []response.MenuType
	if rf, ok := ret.Get(0).(func(context.Context) []response.MenuType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).([]response.MenuType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) MenuAdd(ctx context.Context, addm request.Menu) (mn response.MenuAdd, err error) {
	ret := _m.Called(ctx)

	var r0 response.MenuAdd
	if rf, ok := ret.Get(0).(func(context.Context, request.Menu) response.MenuAdd); ok {
		r0 = rf(ctx, addm)
	} else {
		r0 = ret.Get(0).(response.MenuAdd)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) MenuDelete(ctx context.Context, menu_id string) (md response.MenuDelete, err error) {
	ret := _m.Called(ctx)

	var r0 response.MenuDelete
	if rf, ok := ret.Get(0).(func(context.Context, string) response.MenuDelete); ok {
		r0 = rf(ctx, menu_id)
	} else {
		r0 = ret.Get(0).(response.MenuDelete)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) MenuUpdate(ctx context.Context, menu_id string, upm request.MenuUpdate) (mu response.MenuUpdate, err error) {
	ret := _m.Called(ctx)

	var r0 response.MenuUpdate
	if rf, ok := ret.Get(0).(func(context.Context, string, request.MenuUpdate) response.MenuUpdate); ok {
		r0 = rf(ctx, menu_id, upm)
	} else {
		r0 = ret.Get(0).(response.MenuUpdate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) MenuList(ctx context.Context, warteg_id, menu_type_id, menu_name string) (list []response.MenuList, err error) {
	ret := _m.Called(ctx)

	var r0 []response.MenuList
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []response.MenuList); ok {
		r0 = rf(ctx, warteg_id, menu_type_id, menu_name)
	} else {
		r0 = ret.Get(0).([]response.MenuList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) MenuDetail(ctx context.Context, menu_id string) (mnd response.MenuDetail, err error) {
	ret := _m.Called(ctx)

	var r0 response.MenuDetail
	if rf, ok := ret.Get(0).(func(context.Context, string) response.MenuDetail); ok {
		r0 = rf(ctx, menu_id)
	} else {
		r0 = ret.Get(0).(response.MenuDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
